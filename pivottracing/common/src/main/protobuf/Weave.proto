package pivottracingspec;

option java_package = "edu.brown.cs.systems.pivottracing.agent";
option java_outer_classname = "WeaveProtos";

import "src/main/protobuf/Advice.proto";

/* One of several kinds of tracepoint.  Only one tracepoint should be specified */
message TracepointSpec {
	repeated string procName = 1;	// If specified, only matches processes with the specified process name
	
	optional MethodTracepointSpec methodTracepoint = 2; // Match a method
	optional HardcodedTracepointSpec hardcodedTracepoint = 3; // Match a predefined hardcoded tracepoint 
}

/* Used when one variable should be treated as multiple tuples (eg, an array) */
message MultiExportedVariable {
	required string type = 1; // fully qualified java type of the variable (eg, for "int[]", this will be "int")
	required string literal = 2; // literal java code for the variable
	optional string postProcess = 3; // optional processing of each element (eg ".toString()")
}

/* Variable exported by a tracepoint */
message ExportedVariable {
	optional string literal = 1; // Just a literal exported variable
	optional MultiExportedVariable multi = 2; // An array or collection variable that should be exported as multiple tuples
}

/* Matches a specific method invocation */ 
message MethodTracepointSpec {
    /* enum for where in a method the advice invocation happens */
    enum Where {
      ENTRY = 1;    // weave to method entry
      RETURN = 2;   // weave where method returns normally
      FINALLY = 3;  // weave where method returns or throws an exception
      LINENUM = 4;  // weave into the specified line number
    }
    
	required string className = 1;				// the fully qualified name of the class to instrument
	required string methodName = 2;				// the method name to instrument
	repeated string paramClass = 3;				// the classes of the method parameters (to deal with overloaded methods)
	optional Where where = 4 [default = ENTRY];	// where to insert the probe
	optional int32 lineNumber = 5;		 		// if where is a line number this must be set
	repeated ExportedVariable adviceArg = 6;	// arguments to pass to the advice
}

/* Matches a hardcoded tracepoint that already exists in the system */
message HardcodedTracepointSpec {
	required string id = 1; 					// id of the hardcoded tracepoint
	repeated string export = 2; 				// exported variables to pass to the advice
}

/* Advice is woven at one or more tracepoints.  ID is used to later unweave or replace */
message WeaveSpec {
	required bytes id = 1;			// a unique ID for this weave spec
	required AdviceSpec advice = 2;	// the advice to weave at the tracepoints
	repeated TracepointSpec tracepoint = 3; // the tracepoint(s) to weave the advice at.  args from tracepoint must match advice observed args
}
