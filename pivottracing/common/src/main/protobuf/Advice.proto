package pivottracingspec;

option java_package = "edu.brown.cs.systems.pivottracing.advice";
option java_outer_classname = "AdviceProtos";

/* Supported aggregation and combining types */
enum Agg {
	SUM = 2;
	COUNT = 3;
	MIN = 4;
	MAX = 5;
}

/* Supported filters for packing subsets of tuples into the baggage */
enum Filter {
	FIRST = 2;
	MOSTRECENT = 3;
}

/* An aggregated variable */
message AggVar {
	required string name = 1; // Name of the variable
	required Agg how = 2; // How to aggregate
}

/* Simple tuples */
message TupleSpec {
	repeated string var = 1; // Vars of the tuple
}

/* Filter some variables */
message FilterSpec {
	required Filter filter = 1; // What filter to perform
	repeated string var = 2; // Vars to filter
}

/* A group by with 0 or more aggregations */
message GroupBySpec {
	repeated string groupBy = 1; // Vars to group by
	repeated AggVar aggregate = 2; // Aggregations to perform
}


/* Configures advice to run at some tracepoint */
message AdviceSpec {
	required ObserveSpec observe = 2;	// OBSERVE - create tuples from variables exported by this tracepoint
	repeated UnpackSpec unpack = 3;		// UNPACK - unpack baggage tuples from potentially multiple previous advices
	repeated LetSpec let = 4;			// LET - construct new variables for each tuple
	repeated WhereSpec where = 5;		// WHERE - filter each tuple based on a predicate
	optional PackSpec pack = 6;			// PACK - pack output tuples into the baggage
	optional EmitSpec emit = 7;			// EMIT - output tuples for global aggregation
}

/* Observe variables at a tracepoint */
message ObserveSpec {
	/* Named variables to observe. Variable names must correspond to variables exported by the tracepoint. */
	repeated string var = 1;
}

/* Unpacks tuples from the baggage */
message UnpackSpec {
	required bytes bagId = 1; // ID of the bag containing the tuples
	optional TupleSpec tupleSpec = 2; // Just unpack raw tuples
	optional FilterSpec filterSpec = 3; // Unpack raw tuples with a filter applied
	optional GroupBySpec groupBySpec = 4; // Unpack grouped tuples with aggregations applied
}

/* Calculate and append a new value to the tuple */
message LetSpec {
    required string var = 1; // Name of the variable being constructed
    required string expression = 2; // The expression for calculating the new value.
	repeated string replacementVariables = 3; // Replacement variables for the expression.    
}

/* Drop the tuple if it doesn't satisfy a predicate */
message WhereSpec {
	required string predicate = 1; // The predicate to calculate.
	repeated string replacementVariables = 2; // Replacement variables for the predicate.
}

/* Packs a tuple into the baggage */
message PackSpec {
	required bytes bagId = 1; // ID of the bag containing the tuples
	optional TupleSpec tupleSpec = 2; // Just unpack raw tuples
	optional FilterSpec filterSpec = 3; // Unpack raw tuples with a filter applied
	optional GroupBySpec groupBySpec = 4; // Unpack grouped tuples with aggregations applied
}

/* Emits tuples for global aggregation */
message EmitSpec {
	required bytes outputId = 1; // ID of the query output
	optional TupleSpec tupleSpec = 2; // Just output raw tuples
	optional GroupBySpec groupBySpec = 3; // Output grouped tuples with aggregations applied
}